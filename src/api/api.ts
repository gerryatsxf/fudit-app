/* tslint:disable */
/* eslint-disable */
/**
 * Identity API
 * This is the Identity API. Please use this in order to register, authenticate and get information of users.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateFoodPortionRequestDto
 */
export interface CreateFoodPortionRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateFoodPortionRequestDto
     */
    'foodId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateFoodPortionRequestDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof CreateFoodPortionRequestDto
     */
    'unitId': string;
}
/**
 * 
 * @export
 * @interface CreateFoodRequestDto
 */
export interface CreateFoodRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateFoodRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateFoodRequestDto
     */
    'description': string;
    /**
     * Amount (energy in kcal) of calories per 1 kg of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'kcalPerKg'?: number;
    /**
     * Amount (weight in gr) of proteins per 1 kg of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'proteinsPerKg'?: number;
    /**
     * Amount (weight in gr) of carbohydrates per 1 kg of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'carbohydratesPerKg'?: number;
    /**
     * Amount (weight in gr) of lipids per 1 kg of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'lipidsPerKg'?: number;
    /**
     * Amount (energy in kcal) of calories per 1 liter of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'kcalPerLt'?: number;
    /**
     * Amount (weight in gr) of proteins per 1 litter of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'proteinsPerLt'?: number;
    /**
     * Amount (weight in gr) of carbohydrates per 1 liter of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'carbohydratesPerLt'?: number;
    /**
     * Amount (weight in gr) of lipids per 1 liter of food
     * @type {number}
     * @memberof CreateFoodRequestDto
     */
    'lipidsPerLt'?: number;
}
/**
 * 
 * @export
 * @interface CreateRecipeRequestDto
 */
export interface CreateRecipeRequestDto {
    /**
     * 
     * @type {Array<CreateFoodPortionRequestDto>}
     * @memberof CreateRecipeRequestDto
     */
    'portions': Array<CreateFoodPortionRequestDto>;
    /**
     * 
     * @type {string}
     * @memberof CreateRecipeRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateRecipeRequestDto
     */
    'description': string;
    /**
     * Amount (energy in kcal) of calories per 1 kg of food
     * @type {number}
     * @memberof CreateRecipeRequestDto
     */
    'realKcalPerKg'?: number;
    /**
     * Measured weight (in kg) after cooking all portions of recipe
     * @type {number}
     * @memberof CreateRecipeRequestDto
     */
    'realWeightInKg'?: number;
}
/**
 * 
 * @export
 * @interface UpdateFoodRequestDto
 */
export interface UpdateFoodRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateFoodRequestDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFoodRequestDto
     */
    'description'?: string;
    /**
     * Amount (energy in kcal) of calories per 1 kg of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'kcalPerKg'?: number;
    /**
     * Amount (weight in gr) of proteins per 1 kg of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'proteinsPerKg'?: number;
    /**
     * Amount (weight in gr) of carbohydrates per 1 kg of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'carbohydratesPerKg'?: number;
    /**
     * Amount (weight in gr) of lipids per 1 kg of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'lipidsPerKg'?: number;
    /**
     * Amount (energy in kcal) of calories per 1 liter of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'kcalPerLt'?: number;
    /**
     * Amount (weight in gr) of proteins per 1 litter of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'proteinsPerLt'?: number;
    /**
     * Amount (weight in gr) of carbohydrates per 1 liter of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'carbohydratesPerLt'?: number;
    /**
     * Amount (weight in gr) of lipids per 1 liter of food
     * @type {number}
     * @memberof UpdateFoodRequestDto
     */
    'lipidsPerLt'?: number;
}
/**
 * 
 * @export
 * @interface UpdatePortionRequestDto
 */
export interface UpdatePortionRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePortionRequestDto
     */
    'foodId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePortionRequestDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePortionRequestDto
     */
    'unitId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateRecipeRequestDto
 */
export interface UpdateRecipeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateRecipeRequestDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRecipeRequestDto
     */
    'description'?: string;
    /**
     * Amount (energy in kcal) of calories per 1 kg of food
     * @type {number}
     * @memberof UpdateRecipeRequestDto
     */
    'realKcalPerKg'?: number;
    /**
     * Measured weight (in kg) after cooking all portions of recipe
     * @type {number}
     * @memberof UpdateRecipeRequestDto
     */
    'realWeightInKg'?: number;
}
/**
 * 
 * @export
 * @interface UserCredentialsDto
 */
export interface UserCredentialsDto {
    /**
     * 
     * @type {string}
     * @memberof UserCredentialsDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCredentialsDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserRegistrationDto
 */
export interface UserRegistrationDto {
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegistrationDto
     */
    'lastName': string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCredentialsDto} userCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (userCredentialsDto: UserCredentialsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCredentialsDto' is not null or undefined
            assertParamExists('authControllerLogin', 'userCredentialsDto', userCredentialsDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCredentialsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegistrationDto} userRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (userRegistrationDto: UserRegistrationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegistrationDto' is not null or undefined
            assertParamExists('authControllerRegister', 'userRegistrationDto', userRegistrationDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegistrationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserCredentialsDto} userCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(userCredentialsDto: UserCredentialsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(userCredentialsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserRegistrationDto} userRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(userRegistrationDto: UserRegistrationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(userRegistrationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @param {UserCredentialsDto} userCredentialsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(userCredentialsDto: UserCredentialsDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogin(userCredentialsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegistrationDto} userRegistrationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(userRegistrationDto: UserRegistrationDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerRegister(userRegistrationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {UserCredentialsDto} userCredentialsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerLogin(userCredentialsDto: UserCredentialsDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerLogin(userCredentialsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegistrationDto} userRegistrationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerRegister(userRegistrationDto: UserRegistrationDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerRegister(userRegistrationDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DatabaseApi - axios parameter creator
 * @export
 */
export const DatabaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerCreateConstraints: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db-generator/constraints/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerCreateGraphs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db-generator/graphs/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerDeleteConstraints: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db-generator/constraints/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerDeleteGraphs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/db-generator/graphs/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatabaseApi - functional programming interface
 * @export
 */
export const DatabaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatabaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbGeneratorControllerCreateConstraints(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbGeneratorControllerCreateConstraints(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbGeneratorControllerCreateGraphs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbGeneratorControllerCreateGraphs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbGeneratorControllerDeleteConstraints(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbGeneratorControllerDeleteConstraints(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dbGeneratorControllerDeleteGraphs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dbGeneratorControllerDeleteGraphs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatabaseApi - factory interface
 * @export
 */
export const DatabaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatabaseApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerCreateConstraints(options?: any): AxiosPromise<void> {
            return localVarFp.dbGeneratorControllerCreateConstraints(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerCreateGraphs(options?: any): AxiosPromise<void> {
            return localVarFp.dbGeneratorControllerCreateGraphs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerDeleteConstraints(options?: any): AxiosPromise<void> {
            return localVarFp.dbGeneratorControllerDeleteConstraints(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dbGeneratorControllerDeleteGraphs(options?: any): AxiosPromise<void> {
            return localVarFp.dbGeneratorControllerDeleteGraphs(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DatabaseApi - object-oriented interface
 * @export
 * @class DatabaseApi
 * @extends {BaseAPI}
 */
export class DatabaseApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public dbGeneratorControllerCreateConstraints(options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).dbGeneratorControllerCreateConstraints(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public dbGeneratorControllerCreateGraphs(options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).dbGeneratorControllerCreateGraphs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public dbGeneratorControllerDeleteConstraints(options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).dbGeneratorControllerDeleteConstraints(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatabaseApi
     */
    public dbGeneratorControllerDeleteGraphs(options?: AxiosRequestConfig) {
        return DatabaseApiFp(this.configuration).dbGeneratorControllerDeleteGraphs(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FoodPortionsApi - axios parameter creator
 * @export
 */
export const FoodPortionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portionsControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('portionsControllerRemove', 'id', id)
            const localVarPath = `/portions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePortionRequestDto} updatePortionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portionsControllerUpdate: async (id: string, updatePortionRequestDto: UpdatePortionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('portionsControllerUpdate', 'id', id)
            // verify required parameter 'updatePortionRequestDto' is not null or undefined
            assertParamExists('portionsControllerUpdate', 'updatePortionRequestDto', updatePortionRequestDto)
            const localVarPath = `/portions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePortionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoodPortionsApi - functional programming interface
 * @export
 */
export const FoodPortionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoodPortionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portionsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portionsControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePortionRequestDto} updatePortionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portionsControllerUpdate(id: string, updatePortionRequestDto: UpdatePortionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portionsControllerUpdate(id, updatePortionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoodPortionsApi - factory interface
 * @export
 */
export const FoodPortionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoodPortionsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portionsControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.portionsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePortionRequestDto} updatePortionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portionsControllerUpdate(id: string, updatePortionRequestDto: UpdatePortionRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.portionsControllerUpdate(id, updatePortionRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FoodPortionsApi - object-oriented interface
 * @export
 * @class FoodPortionsApi
 * @extends {BaseAPI}
 */
export class FoodPortionsApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodPortionsApi
     */
    public portionsControllerRemove(id: string, options?: AxiosRequestConfig) {
        return FoodPortionsApiFp(this.configuration).portionsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdatePortionRequestDto} updatePortionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodPortionsApi
     */
    public portionsControllerUpdate(id: string, updatePortionRequestDto: UpdatePortionRequestDto, options?: AxiosRequestConfig) {
        return FoodPortionsApiFp(this.configuration).portionsControllerUpdate(id, updatePortionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FoodsApi - axios parameter creator
 * @export
 */
export const FoodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateFoodRequestDto} createFoodRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerCreate: async (createFoodRequestDto: CreateFoodRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFoodRequestDto' is not null or undefined
            assertParamExists('foodsControllerCreate', 'createFoodRequestDto', createFoodRequestDto)
            const localVarPath = `/foods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFoodRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/foods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('foodsControllerFindOne', 'id', id)
            const localVarPath = `/foods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFoodRequestDto} updateFoodRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerUpdate: async (id: string, updateFoodRequestDto: UpdateFoodRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('foodsControllerUpdate', 'id', id)
            // verify required parameter 'updateFoodRequestDto' is not null or undefined
            assertParamExists('foodsControllerUpdate', 'updateFoodRequestDto', updateFoodRequestDto)
            const localVarPath = `/foods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFoodRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoodsApi - functional programming interface
 * @export
 */
export const FoodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateFoodRequestDto} createFoodRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async foodsControllerCreate(createFoodRequestDto: CreateFoodRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.foodsControllerCreate(createFoodRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async foodsControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.foodsControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async foodsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.foodsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFoodRequestDto} updateFoodRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async foodsControllerUpdate(id: string, updateFoodRequestDto: UpdateFoodRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.foodsControllerUpdate(id, updateFoodRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoodsApi - factory interface
 * @export
 */
export const FoodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoodsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateFoodRequestDto} createFoodRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerCreate(createFoodRequestDto: CreateFoodRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.foodsControllerCreate(createFoodRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.foodsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.foodsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateFoodRequestDto} updateFoodRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        foodsControllerUpdate(id: string, updateFoodRequestDto: UpdateFoodRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.foodsControllerUpdate(id, updateFoodRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FoodsApi - object-oriented interface
 * @export
 * @class FoodsApi
 * @extends {BaseAPI}
 */
export class FoodsApi extends BaseAPI {
    /**
     * 
     * @param {CreateFoodRequestDto} createFoodRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public foodsControllerCreate(createFoodRequestDto: CreateFoodRequestDto, options?: AxiosRequestConfig) {
        return FoodsApiFp(this.configuration).foodsControllerCreate(createFoodRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public foodsControllerFindAll(options?: AxiosRequestConfig) {
        return FoodsApiFp(this.configuration).foodsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public foodsControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return FoodsApiFp(this.configuration).foodsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateFoodRequestDto} updateFoodRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public foodsControllerUpdate(id: string, updateFoodRequestDto: UpdateFoodRequestDto, options?: AxiosRequestConfig) {
        return FoodsApiFp(this.configuration).foodsControllerUpdate(id, updateFoodRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateRecipeRequestDto} createRecipeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerCreate: async (createRecipeRequestDto: CreateRecipeRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRecipeRequestDto' is not null or undefined
            assertParamExists('recipesControllerCreate', 'createRecipeRequestDto', createRecipeRequestDto)
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRecipeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recipesControllerFindOne', 'id', id)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRecipeRequestDto} updateRecipeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerUpdate: async (id: string, updateRecipeRequestDto: UpdateRecipeRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recipesControllerUpdate', 'id', id)
            // verify required parameter 'updateRecipeRequestDto' is not null or undefined
            assertParamExists('recipesControllerUpdate', 'updateRecipeRequestDto', updateRecipeRequestDto)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecipeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateRecipeRequestDto} createRecipeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesControllerCreate(createRecipeRequestDto: CreateRecipeRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesControllerCreate(createRecipeRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRecipeRequestDto} updateRecipeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesControllerUpdate(id: string, updateRecipeRequestDto: UpdateRecipeRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesControllerUpdate(id, updateRecipeRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateRecipeRequestDto} createRecipeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerCreate(createRecipeRequestDto: CreateRecipeRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.recipesControllerCreate(createRecipeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.recipesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.recipesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRecipeRequestDto} updateRecipeRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesControllerUpdate(id: string, updateRecipeRequestDto: UpdateRecipeRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.recipesControllerUpdate(id, updateRecipeRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * 
     * @param {CreateRecipeRequestDto} createRecipeRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public recipesControllerCreate(createRecipeRequestDto: CreateRecipeRequestDto, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).recipesControllerCreate(createRecipeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public recipesControllerFindAll(options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).recipesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public recipesControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).recipesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateRecipeRequestDto} updateRecipeRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public recipesControllerUpdate(id: string, updateRecipeRequestDto: UpdateRecipeRequestDto, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).recipesControllerUpdate(id, updateRecipeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnitsApi - axios parameter creator
 * @export
 */
export const UnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unitsControllerFindOne', 'id', id)
            const localVarPath = `/units/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnitsApi - functional programming interface
 * @export
 */
export const UnitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnitsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitsControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitsControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unitsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unitsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnitsApi - factory interface
 * @export
 */
export const UnitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnitsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitsControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.unitsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unitsControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.unitsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnitsApi - object-oriented interface
 * @export
 * @class UnitsApi
 * @extends {BaseAPI}
 */
export class UnitsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public unitsControllerFindAll(options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).unitsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApi
     */
    public unitsControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return UnitsApiFp(this.configuration).unitsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetProfile(options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerGetProfile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetProfile(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }
}


